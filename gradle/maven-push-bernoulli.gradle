apply plugin: 'maven'
apply plugin: 'signing'

group = GROUP_ID
version = ARTIFACT_VERSION_NAME

afterEvaluate { project ->

    uploadArchives {

        repositories {

            mavenDeployer {

                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                Properties secretProperties = new Properties()
                secretProperties.load(project.rootProject.file("local.properties").newDataInputStream())

                repository(url: REPOSITORY_RELEASE_URL) {
                    authentication(userName: secretProperties.getProperty("OSSRH_SONATYPE_USERNAME", ""),
                            password: secretProperties.getProperty("OSSRH_SONATYPE_PASSWORD", ""))
                }

                snapshotRepository(url: REPOSITORY_SNAPSHOT_URL) {
                    authentication(userName: secretProperties.getProperty("OSSRH_SONATYPE_USERNAME", ""),
                            password: secretProperties.getProperty("OSSRH_SONATYPE_PASSWORD", ""))
                }

                pom.project {

                    name LIBRARY_NAME
                    packaging POM_PACKAGING

                    artifactId ARTIFACT_ID

                    description POM_DESCRIPTION
                    url LIBRARY_URL

                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }

                    licenses {
                        license {
                            name = LICENSE_NAME
                            url = LICENSE_URL
                        }
                    }

                    developers {
                        developer {
                            id = DEVELOPER_ID
                            name = DEVELOPER_NAME
                            email = DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }

    signing {

        Properties secretProperties = new Properties()
        secretProperties.load(project.rootProject.file("local.properties").newDataInputStream())

        def signingKey = secretProperties.getProperty("signing.keyId")
        def signingPassword = secretProperties.getProperty("signing.password")
        def singingKeyRingFile = secretProperties.getProperty("signing.secretKeyRingFile")

        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {

        if (!project.plugins.hasPlugin('kotlin-android')) {
            source = android.sourceSets.main.java.srcDirs
        }
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        exclude '**/internal/*'
        include '**/*.java'

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {

        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}